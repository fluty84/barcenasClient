{"ast":null,"code":"import axios from \"axios\";\nimport { useContext } from \"react\";\nimport { AuthContext } from \"../context/auth.context\";\n\nclass ProductService {\n  constructor() {\n    var _s = $RefreshSig$();\n\n    this.saveProduct = product => {\n      return this.api.post('/create-product', product);\n    };\n\n    this.getAll = _s(() => {\n      _s();\n\n      const {\n        user\n      } = useContext(AuthContext);\n      return this.api.post('/restaurant/:id', user);\n    }, \"y3FQDew7UyrSqYkvQcTdCsLbAB8=\");\n    this.api = axios.create({\n      baseURL: 'http://localhost:5005/api'\n    });\n    this.api.interceptors.request.use(config => {\n      const storedToken = localStorage.getItem(\"authToken\");\n\n      if (storedToken) {\n        config.headers = {\n          Authorization: `Bearer ${storedToken}`\n        };\n      }\n\n      return config;\n    });\n  }\n\n  verify(token) {\n    return this.api.get('/verify', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n\n}\n\nconst productService = new ProductService();\nexport default productService;","map":{"version":3,"sources":["/Users/gordi/Desktop/Ironhack/barcenas/client/src/services/product.services.js"],"names":["axios","useContext","AuthContext","ProductService","constructor","saveProduct","product","api","post","getAll","user","create","baseURL","interceptors","request","use","config","storedToken","localStorage","getItem","headers","Authorization","verify","token","get","productService"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA4B,yBAA5B;;AAGA,MAAMC,cAAN,CAAqB;AAEjBC,EAAAA,WAAW,GAAG;AAAA;;AAAA,SAqBdC,WArBc,GAqBAC,OAAO,IAAI;AACrB,aAAO,KAAKC,GAAL,CAASC,IAAT,CAAc,iBAAd,EAAiCF,OAAjC,CAAP;AACH,KAvBa;;AAAA,SAyBdG,MAzBc,MAyBL,MAAM;AAAA;;AAEX,YAAM;AAAEC,QAAAA;AAAF,UAAWT,UAAU,CAACC,WAAD,CAA3B;AAEA,aAAO,KAAKK,GAAL,CAASC,IAAT,CAAc,iBAAd,EAAiCE,IAAjC,CAAP;AACH,KA9Ba;AACV,SAAKH,GAAL,GAAWP,KAAK,CAACW,MAAN,CAAa;AAEpBC,MAAAA,OAAO,EAAE;AAFW,KAAb,CAAX;AAMA,SAAKL,GAAL,CAASM,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAmCC,MAAD,IAAY;AAE1C,YAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAApB;;AAEA,UAAIF,WAAJ,EAAiB;AACbD,QAAAA,MAAM,CAACI,OAAP,GAAiB;AAAEC,UAAAA,aAAa,EAAG,UAASJ,WAAY;AAAvC,SAAjB;AACH;;AAED,aAAOD,MAAP;AAEH,KAVD;AAWH;;AAcDM,EAAAA,MAAM,CAACC,KAAD,EAAQ;AACV,WAAO,KAAKhB,GAAL,CAASiB,GAAT,CAAa,SAAb,EAAwB;AAAEJ,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASE,KAAM;AAAjC;AAAX,KAAxB,CAAP;AACH;;AApCgB;;AAuCrB,MAAME,cAAc,GAAG,IAAItB,cAAJ,EAAvB;AAEA,eAAesB,cAAf","sourcesContent":["import axios from \"axios\"\nimport { useContext } from \"react\"\nimport { AuthContext } from \"../context/auth.context\"\n\n\nclass ProductService {\n\n    constructor() {\n        this.api = axios.create({\n\n            baseURL: 'http://localhost:5005/api'\n\n        })\n\n        this.api.interceptors.request.use((config) => {\n\n            const storedToken = localStorage.getItem(\"authToken\");\n\n            if (storedToken) {\n                config.headers = { Authorization: `Bearer ${storedToken}` }\n            }\n\n            return config\n\n        })\n    }\n\n\n    saveProduct = product => {\n        return this.api.post('/create-product', product)\n    }\n\n    getAll = () => {\n\n        const { user } = useContext(AuthContext)\n\n        return this.api.post('/restaurant/:id', user)\n    }\n\n    verify(token) {\n        return this.api.get('/verify', { headers: { Authorization: `Bearer ${token}` } })\n    }\n}\n\nconst productService = new ProductService()\n\nexport default productService"]},"metadata":{},"sourceType":"module"}