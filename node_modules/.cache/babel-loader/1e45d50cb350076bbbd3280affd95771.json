{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gonza\\\\Desktop\\\\ironhack\\\\9week\\\\barcenasClient\\\\src\\\\context\\\\auth.context.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from 'react';\nimport { useEffect } from 'react';\nimport authService from '../services/auth.services';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\nfunction AuthProviderWrapper(props) {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState('popino');\n\n  const storeToken = token => {\n    localStorage.setItem(\"authToken\", token);\n  };\n\n  const removeToken = () => {\n    localStorage.removeItem(\"authToken\");\n  };\n\n  const getToken = () => {\n    return localStorage.getItem(\"authToken\");\n  };\n\n  const authenticateUser = () => {\n    const storedToken = getToken();\n\n    if (!storedToken) {\n      logOutUser();\n    } else {\n      authService.verify(storedToken).then(_ref => {\n        let {\n          data\n        } = _ref;\n        const user = data;\n        setIsLoggedIn(true);\n        setIsLoading(false);\n        setUser(user);\n      }).catch(() => logOutUser());\n    }\n  };\n\n  const logOutUser = () => {\n    removeToken();\n    setIsLoggedIn(false);\n    setIsLoading(false);\n    setUser(null);\n  };\n\n  useEffect(() => authenticateUser(), []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      isLoading,\n      user,\n      storeToken,\n      authenticateUser,\n      logOutUser\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthProviderWrapper, \"nn6wKclPkF5uRRUJ7JzBy+W3UgA=\");\n\n_c = AuthProviderWrapper;\nexport { AuthContext, AuthProviderWrapper };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProviderWrapper\");","map":{"version":3,"sources":["C:/Users/gonza/Desktop/ironhack/9week/barcenasClient/src/context/auth.context.jsx"],"names":["React","createContext","useState","useEffect","authService","AuthContext","AuthProviderWrapper","props","isLoggedIn","setIsLoggedIn","isLoading","setIsLoading","user","setUser","storeToken","token","localStorage","setItem","removeToken","removeItem","getToken","getItem","authenticateUser","storedToken","logOutUser","verify","then","data","catch","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;;AAGA,MAAMC,WAAW,gBAAGJ,aAAa,EAAjC;;AAGA,SAASK,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AAEhC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,QAAD,CAAhC;;AAEA,QAAMY,UAAU,GAAIC,KAAD,IAAW;AAC1BC,IAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCF,KAAlC;AACH,GAFD;;AAIA,QAAMG,WAAW,GAAG,MAAM;AACtBF,IAAAA,YAAY,CAACG,UAAb,CAAwB,WAAxB;AACH,GAFD;;AAIA,QAAMC,QAAQ,GAAG,MAAM;AACnB,WAAOJ,YAAY,CAACK,OAAb,CAAqB,WAArB,CAAP;AACH,GAFD;;AAKA,QAAMC,gBAAgB,GAAG,MAAM;AAE3B,UAAMC,WAAW,GAAGH,QAAQ,EAA5B;;AAEA,QAAI,CAACG,WAAL,EAAkB;AACdC,MAAAA,UAAU;AACb,KAFD,MAEO;AACHpB,MAAAA,WAAW,CACNqB,MADL,CACYF,WADZ,EAEKG,IAFL,CAEU,QAAc;AAAA,YAAb;AAAEC,UAAAA;AAAF,SAAa;AAChB,cAAMf,IAAI,GAAGe,IAAb;AACAlB,QAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,OAAO,CAACD,IAAD,CAAP;AACH,OAPL,EAQKgB,KARL,CAQW,MAAMJ,UAAU,EAR3B;AASH;AACJ,GAjBD;;AAmBA,QAAMA,UAAU,GAAG,MAAM;AACrBN,IAAAA,WAAW;AACXT,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,IAAAA,OAAO,CAAC,IAAD,CAAP;AACH,GALD;;AAOAV,EAAAA,SAAS,CAAC,MAAMmB,gBAAgB,EAAvB,EAA2B,EAA3B,CAAT;AAEA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEd,MAAAA,UAAF;AAAcE,MAAAA,SAAd;AAAyBE,MAAAA,IAAzB;AAA+BE,MAAAA,UAA/B;AAA2CQ,MAAAA,gBAA3C;AAA6DE,MAAAA;AAA7D,KAA7B;AAAA,cACKjB,KAAK,CAACsB;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GApDQvB,mB;;KAAAA,mB;AAsDT,SAASD,WAAT,EAAsBC,mBAAtB","sourcesContent":["import React, { createContext, useState } from 'react'\r\nimport { useEffect } from 'react';\r\nimport authService from '../services/auth.services';\r\n\r\n\r\nconst AuthContext = createContext()\r\n\r\n\r\nfunction AuthProviderWrapper(props) {\r\n\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [user, setUser] = useState('popino');\r\n\r\n    const storeToken = (token) => {\r\n        localStorage.setItem(\"authToken\", token)\r\n    }\r\n\r\n    const removeToken = () => {\r\n        localStorage.removeItem(\"authToken\")\r\n    }\r\n\r\n    const getToken = () => {\r\n        return localStorage.getItem(\"authToken\")\r\n    }\r\n\r\n\r\n    const authenticateUser = () => {\r\n\r\n        const storedToken = getToken()\r\n\r\n        if (!storedToken) {\r\n            logOutUser()\r\n        } else {\r\n            authService\r\n                .verify(storedToken)\r\n                .then(({ data }) => {\r\n                    const user = data\r\n                    setIsLoggedIn(true);\r\n                    setIsLoading(false);\r\n                    setUser(user);\r\n                })\r\n                .catch(() => logOutUser())\r\n        }\r\n    }\r\n\r\n    const logOutUser = () => {\r\n        removeToken()\r\n        setIsLoggedIn(false);\r\n        setIsLoading(false);\r\n        setUser(null);\r\n    }\r\n\r\n    useEffect(() => authenticateUser(), [])\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ isLoggedIn, isLoading, user, storeToken, authenticateUser, logOutUser }}>\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport { AuthContext, AuthProviderWrapper };"]},"metadata":{},"sourceType":"module"}